observation_count,
species_observed,
observation_date
) |>
mutate(week = lubridate::week(observation_date),
year = lubridate::year(observation_date)) |>
group_by(long_bin, lat_bin, week, year) |>
summarize(observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
# beta-ing apply ====
x <- df_to_mat(weekly, over = 1, nest_by = 'wk')
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
# beta-ing apply ====
x <- df_to_mat(weekly, over = 1, nest_by = 'week')
image()
image(x)
# beta-ing apply ====
avg_mats <- purrr::map(1:52, \(x) df_to_mat(weekly, over = x, nest_by = 'week')) |>
purrr::set_names(wks)
# beta-ing apply ====
avg_mats <- purrr::map(1:5, \(x) df_to_mat(weekly, over = x, nest_by = 'week')) |>
purrr::set_names(wks[1:5])
wks <- rep('', 52)
for(i in 1:52){
wks[i] <- paste0('wk', i)
}
# beta-ing apply ====
avg_mats <- purrr::map(1:5, \(x) df_to_mat(weekly, over = x, nest_by = 'week')) |>
purrr::set_names(wks[1:5])
View(avg_mats)
cols <- viridis::viridis(200, option = 'inferno')
image(avg_mats$wk1, col = col)
image(avg_mats$wk1, col = cols)
?image
image(avg_mats$wk1, col = cols)
smoothed <- lapply(avg_mats, geom_smooth)
image(smoothed$wk1, col = cols)
image(log10(smoothed$wk1+1e-3), col = cols)
image(log10(avg_mats$wk1+1e-3), col = cols)
View(geom_smooth)
n1 <- paste0(species, 'raw.pdf')
species <- 'fiscro'
n1 <- paste0(species, 'raw.pdf')
# DESCRIPTION ------------------------------------------------------------------
#>
#> This script takes the average observation frequency between years for each
#> latitude/longitude cell for each week of the year.
#>
# ------------------------------------------------------------------------------
fp <- file.path('~', 'eBird_project', 'weekly')
file.path(fp, n1)
n1 <- paste0(species, '_raw.pdf')
file.path(fp, n1)
?image
x <- matrix(seq(1, 9), nrow = 3)
image(x)
image(x, main = 'blah')
?purrr::maps
?purrr::map
wks <- rep('', 52)
for(i in 1:52){
wks[i] <- paste0('wk', i)
}
cols <- viridis::viridis(200, option = 'inferno')
avg_mats <- purrr::map(1:52, \(x) df_to_mat(weekly, over = x, nest_by = 'week')) |>
purrr::set_names(wks)
## packages ----
library(dplyr)
library(optparse)
## functions ----
source('01functions.R')
species <- 'fiscro'
# Load and Wrangle Data ========================================================
# testing purposes:
load('./processed_data/subsample.RData')
# add week, year columns
weekly <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date
) |>
mutate(week = lubridate::week(observation_date),
year = lubridate::year(observation_date)) |>
group_by(long_bin, lat_bin, week, year) |>
summarize(observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
opt <- list(s = species)
# add week, year columns
weekly <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date
) |>
mutate(week = lubridate::week(observation_date),
year = lubridate::year(observation_date)) |>
group_by(long_bin, lat_bin, week, year) |>
summarize(observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
wks <- rep('', 52)
for(i in 1:52){
wks[i] <- paste0('wk', i)
}
cols <- viridis::viridis(200, option = 'inferno')
avg_mats <- purrr::map(1:5, \(x) df_to_mat(weekly, over = x, nest_by = 'week')) |>
purrr::set_names(wks[1:5])
purrr::map(1:5, \(x) image(avg_mats, col = cols, main = as.character(x)))
avg_mats[[1]]
purrr::map(1:5, \(x) image(avg_mats[[x]], col = cols, main = as.character(x)))
purrr::map(1:5, \(x) image(avg_mats[[x]],
col = cols,
main = as.character(x),
cex.main = 0.8),)
purrr::map(1:5, \(x) image(avg_mats[[x]],
col = cols,
main = as.character(x),
cex.main = 0.8))
lubridate::day('Jan 1 2020')
lubridate::day('January 01 2020')
lubridate::day('01/01/2020')
?lubridate::day
# Load and Wrangle Data ========================================================
# testing purposes:
load('./processed_data/subsample.RData')
lubridate::day(subsample$observation_date[1:30])
View(subsample)
lubridate::yday(subsample$observation_date[1:30])
lubridate::yday('2020-01-01')
lubridate::yday('2020-12-31')
lubridate::yday('2021-01-01')
lubridate::yday('2021-12-31')
# add week, year columns
weekly <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date
) |>
mutate(week = lubridate::week(observation_date),
year = lubridate::year(observation_date)) |>
group_by(long_bin, lat_bin, week, year) |>
summarize(observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
library(dplyr)
library(optparse)
## functions ----
source('01functions.R')
opt <- list(s = 'amecro')
# add week, year columns
weekly <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date
) |>
mutate(week = lubridate::week(observation_date),
year = lubridate::year(observation_date)) |>
group_by(long_bin, lat_bin, week, year) |>
summarize(observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
for(i in 1:2){
wks[i] <- paste0('wk', i)
}
# Average Movements ============================================================
wks <- rep('', 2)
for(i in 1:2){
wks[i] <- paste0('wk', i)
}
cols <- viridis::viridis(200, option = 'inferno')
avg_mats <- purrr::map(1:2, \(x) df_to_mat(weekly, over = x, nest_by = 'week')) |>
lapply(MARGIN = c(1, 2), mean, na.rm = TRUE) |>
purrr::set_names(wks)
View(avg_mats)
avg_mats <- purrr::map(1:2, \(x) df_to_mat(weekly, over = x, nest_by = 'week'))
avg_mats <- purrr::map(1:2, \(x) df_to_mat(weekly, over = x, nest_by = 'week'))|>
lapply(MARGIN = c(1, 2), mean, na.rm = TRUE)
avg_mats <- purrr::map(1:2, \(x) df_to_mat(weekly, over = x, nest_by = 'week'))|>
lapply(MARGIN = 3, mean, na.rm = TRUE)
avg_mats <- purrr::map(1:2, \(x) df_to_mat(weekly, over = x, nest_by = 'week'))
str(avg_mats)
lapply(avg_mats, MARGIN = c(1,2), mean, na.rm = TRUE)
apply(avg_mats, MARGIN = c(1,2), mean, na.rm = TRUE)
dim(avg_mats)
avg_mats
dim(avg_mats)
dim(avg_mats[[1]])
apply(X = avg_mats, MARGIN = c(1,2), mean, na.rm = TRUE)
lapply(avg_mats, apply, MARGIN = c(1,2), mean, na.rm = TRUE)
lapply(avg_mats, apply, MARGIN = c(1,2), mean, na.rm = TRUE) |> view()
lapply(avg_mats, apply, MARGIN = c(1,2), mean, na.rm = TRUE) |> View()
wks <- rep('', 5)
for(i in 1:5){
wks[i] <- paste0('wk', i)
}
cols <- viridis::viridis(200, option = 'inferno')
avg_mats <- purrr::map(1:5, \(x) df_to_mat(weekly, over = x, nest_by = 'week')) |>
lapply(apply, MARGIN = c(1,2), mean, na.rm = TRUE) |>
purrr::set_names(wks)
View(avg_mats)
lubridate::yday('2020-02-29')
lubridate::yday('2019-02-29')
lubridate::yday('2019-03-01')
lubridate::yday('2019-02-28')
lubridate::yday('2016-02-28')
2016%%4
2017%%6
2017%%4
2018%%4
2019%%4
daily |> subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date) |>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day >= 60 ~ day-1
))
daily |> subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date) |>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day >= 60 ~ day-1
))
daily |> subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day >= 60 ~ day-1
))
rm(avg_mats)
View(daily)
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day >= 60 ~ day-1,
.default = day
))
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day < 60 ~ day,
day >= 60 ~ day-1,
.default = day
))
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day < 60 ~ day,
day >= 60 ~ day-1
))
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day < 60 ~ day,
day >= 60 ~ day-1,
.default = day
))
View(daily)
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day < 60 ~ day,
day >= 60 ~ day-1
))
View(daily)
daily |> filter(day == 60)
daily |> filter(day == 60) |> View()
daily |> filter(day == 59 & corrected_day == 59)
daily |> filter(day == 59 & corrected_day == 59) |> View()
daily |> filter((day == 59 & corrected_day == 59)|(day == 60 & corrected_day == 59)) |> View()
daily |> filter((day == 59 & corrected_day == 59)|(day == 60 & corrected_day == 59)) |> arrange(year) |> View()
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day < 60 ~ day,
day >= 60 ~ day-1
)) |>
group_by(long_bin, lat_bin, corrected_day, year) |>
summarize(observation_count = sum(obseravtion_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date),
corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
day < 60 ~ day,
day >= 60 ~ day-1
)) |>
group_by(long_bin, lat_bin, corrected_day, year) |>
summarize(observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
View(daily)
length(unique(corrected_day))
length(unique(daily$corrected_day))
min(daily$corrected_day)
max(daily$corrected_day)
filter(daily, n_lists >= 10) |> View()
filter(daily, n_lists >= 10) |> dim()
dim(daily)
seq(1,7) <= 1+7
seq(1,8) <= 1+7
seq(1,9) <= 1+7
lubridate::yday('2019-12-25')
365-7
lubridate::yday('2019-12-31')-lubridate::yday('2019-12-25')
lubridate::yday('2019-12-31')-lubridate::yday('2019-12-26')
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
testing_df <- filter(daily, lubridate::week(observation_date) <= 2)
testing_df <- filter(daily, corrected_day <= 14, year == 2010)
testing_df
View(testing_df)
testing_df <- filter(daily, corrected_day <= 14, year %in% c(2019, 2020))
x <- df_to_slide_array(testing_df)
out <- tidyr::expand(temp,
tidyr::nesting(year),
corrected_day = 1:365,
long_bin = 1:200,
lat_bin = 1:200) |>
dplyr::full_join(df) |> # make sure we have all the columns we need
# this filter is caveman style and can be improved but hopefully will work for now
# this gives us our day + 7 days in advance; for end of the year days, it
# "wraps around" -- ie., 12/31 gets the 12/31 data plus 1/1-1/6.
dplyr::filter(corrected_day <= over + 7 | ((365-over < 7) &
((corrected_day %in% seq(over, 365))|
(corrected_day %in% seq(1, (365-over)))
)
)
) |>
dplyr::group_by(long_bin, lat_bin, year) |> # don't group by day -- we want to combine over the window
dplyr::summarize(start_day = over,
observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists) |> # result should be a dataframe with 1 row per lat/long combination
dplyr::arrange(year, lat_bin, long_bin)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
x <- df_to_slide_array(testing_df)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
purrr::map(1:14, \(x) df_to_slide_array(testing_df, over = x))
x - purrr::map(1:14, \(x) df_to_slide_array(testing_df, over = x))
x <- purrr::map(1:14, \(x) df_to_slide_array(testing_df, over = x))
View(x)
lapply(x, image)
lapply(x, apply, MARGIN = c(1,2), mean, na.rm = TRUE)
y <- lapply(x, apply, MARGIN = c(1,2), mean, na.rm = TRUE)
lapply(y, image)
warnings()
sum(!is.na(y))
View(x[[1]][[1]])
View(x[[1]])
sum(!is.na(x[[1]]))
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date)
#corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
#                                day < 60 ~ day,
#                               day >= 60 ~ day-1
#)
) |>
group_by(long_bin, lat_bin, corrected_day, year) |>
summarize(observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
daily <- subsample |> filter(species_code == opt$s,
lubridate::year(observation_date) >= 2010) |>
select(long_bin,
lat_bin,
species_code,
observation_count,
species_observed,
observation_date)|>
mutate(day = lubridate::yday(observation_date),
year = lubridate::year(observation_date)
#corrected_day = dplyr::case_when(year %% 4 > 0 ~ day,
#                                day < 60 ~ day,
#                               day >= 60 ~ day-1
#)
) |>
group_by(long_bin, lat_bin, day, year) |>
summarize(observation_count = sum(observation_count),
species_observed = sum(species_observed),
n_lists = n(),
obs_freq = species_observed/n_lists)
View(daily)
365%%7
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
# testing ====
y <- purrr::map(1, \(x) df_to_slide_array(daily, x))
seq(1, 1_7)
seq(1, 1+7)
365-366
seq(365, 365)
seq(366, 365)
366-7
lubridate::yday('25 Dec 2020')
