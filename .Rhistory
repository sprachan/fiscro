species_code == 'amecro')
print('filtered')
# process data
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
print('summarized')
# free up some RAM
remove(subsample)
ggplot(ym_obs_freq, aes(x = log10(observation_frequency)))+geom_histogram()
ggplot(ym_obs_freq, aes(x = log10(obs_freq)))+geom_histogram()
ggplot(ym_obs_freq, aes(x = obs_freq)+geom_histogram()
)
ggplot(ym_obs_freq, aes(x = obs_freq))+geom_histogram()
ggplot(ym_obs_freq, aes(x = obs_freq))+geom_histogram(bins = 100)
ggplot(ym_obs_freq, aes(x = obs_freq))+geom_histogram(bins = 50)
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)+
labs(title = 'untransformed OF, 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+0.1)))+
geom_histogram(bins = 50)+
labs(title = 'log10(OF+0.1), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+1e-4)))+
geom_histogram(bins = 50)+
labs(title = 'log10(OF+1e-4), 0 and 1 filtered out')
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == 'fiscro')
print('filtered')
# process data
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
print('summarized')
# free up some RAM
remove(subsample)
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)+
labs(title = 'untransformed OF, 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+0.1)))+
geom_histogram(bins = 50)+
labs(title = 'log10(OF+0.1), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+1e-4)))+
geom_histogram(bins = 50)+
labs(title = 'log10(OF+1e-4), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)+
labs(title = 'fiscro untransformed OF, 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+0.1)))+
geom_histogram(bins = 50)+
labs(title = 'fiscro log10(OF+0.1), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+1e-4)))+
geom_histogram(bins = 50)+
labs(title = 'fiscro log10(OF+1e-4), 0 and 1 filtered out')
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == 'amecro')
print('filtered')
# process data
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
print('summarized')
# free up some RAM
remove(subsample)
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)+
labs(title = 'amecro untransformed OF, 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+0.1)))+
geom_histogram(bins = 50)+
labs(title = 'amecro log10(OF+0.1), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+1e-4)))+
geom_histogram(bins = 50)+
labs(title = 'amecro log10(OF+1e-4), 0 and 1 filtered out')
x <- grepl('x', 'x')|grepl('y', 'x')
x <- grepl('x', 'y')|grepl('y', 'x')
?grepl
stopifnot('error message' = x)
stopifnot(x)
?purrr::map
??complete
?tidyr::complete
?tidyr::nesting
?dplyr::arrange
?purrr::map
??enframe
??unnest_longer
?dplyr::case_when
?tibble::enframe
?purrr::map
?dplyr::ungroup
1e-2
10^(-2)
10^(-2.5)
epsilon <- 1e-2
log10(0+epsilon)
log10(1+epsilon)
x <- seq(0, 1, length.out = 100)
plot(x, log10(x+epsilon))
#|>
|>
log10(0.01+epsilon)
typeof(epsilon)
as.numeric(epsilon) |> typeof()
?log10
?lapply
x <- list(0, 1, 2)
lapply(\(x) log10(.x + 0.001))
lapply(x, \(x) log10(.x + 0.001))
lapply(x, \(x) log10(x + 0.001))
y<- lapply(x, \(x) log10(x + 0.001))
log10(0+0.001)
log10(1+0.001)
log10(2+0.001)
log10(0+1e-2)
log10(1+1e-2)
?ggplot2::scale_fill_distiller
display.brewer.all()
RColorBrewer::brewer.pal()
RColorBrewer::display.brewer.all()
?dplyr::summarise
?dplyr::reframe
?dplyr::row_bind
?dplyr::bind_rows
x <- data.frame(c('a', 'b', 'c'), c(1, 2, 3))
x
x <- data.frame(a = c(1, 2, 3), b = c(4, 5, 6))
x
y <- data.frame(a = c(7, 8, 9), b = c(10, 11, 12))
y
dplyr::bind_rows(x, y)
dplyr::bind_rows(x, y, .id = 'df')
dplyr::bind_rows(x, y, .id = 'id')
x
tibble::tibble(x)
dplyr::bind_rows(list(x = x, y = y), .id = 'id')
?write.table
x <- c(0, 1, NA, NA)
sum(x > 0)
sum(x > 0, na.rm = TRUE)
A <- matrix(c(-2, -2, 4, -4, 1, 2, 2, 2, 5), nrow = 3, ncol = 3)
A
?eigen
eigen(A)
eigen(A)$vectors/min(eigen(A)$vectors)
vecs <- eigen(A)$vectors
vecs
vecs[,1]/min(vecs[,1])
vecs[,2]/min(vecs[,2])
vecs[,3]/min(vecs[,3])
vecs[,3]/min(vecs[,3])*3
A <- matrix(rbinom(9, 10), nrow = 3, ncol = 3)
A <- matrix(rbinom(9, 10, prob = rep(1/10, 9)), nrow = 3, ncol = 3)
?rbinom
rbinom(1, 5)
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(30, 5, prob = rep(1, 5))
rbinom(30, 5, prob = rep(1/5, 5))
A <- matrix(rbinom(9, 10, prob = rep(1/10, 9)), nrow = 3, ncol = 3)
A
eigen(A)
library(phaseR)
install,packages('phaseR')
install.packages('phaseR')
library(phaseR)
?phaseR
out <- flowField(de,
xlim = c(0, 5),
ylim = c(0, 10),
parameters = params)
# lotka-volterra model
de <- function(t, Y, parameters){
lambda <- parameters[1]
epsilon <- parameters[2]
eta <- parameters[3]
delta <- parameters[4]
dY <- numeric(2)
dY[1] <- lambda*x-epsilon*x*y
dY[2] <- eta*x*y-delta*y
return(list(dY))
}
params <- c(2, 1, 3, 2)
out <- flowField(de,
xlim = c(0, 5),
ylim = c(0, 10),
parameters = params)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/modeling/phase_example.R", echo=TRUE)
# lotka-volterra model
de <- function(t, Y, parameters){
lambda <- parameters[1]
epsilon <- parameters[2]
eta <- parameters[3]
delta <- parameters[4]
x <- Y[1]
y <- Y[2]
dY <- numeric(2)
dY[1] <- lambda*x-epsilon*x*y
dY[2] <- eta*x*y-delta*y
return(list(dY))
}
params <- c(2, 1, 3, 2)
out <- flowField(de,
xlim = c(0, 5),
ylim = c(0, 10),
parameters = params,
add = FALSE)
?purrr::map
x <- c(1, 2, 3)
purrr::map(x, \(x) rnorm(x, 0, 1))
purrr::map(x, \(x) rnorm(x, 0, 1)) |> unlist()
purrr::map(x, \(x) dnorm(x, 0, 1)) |> unlist()
purrr::map(x, \(x) dnorm(x, 0, 1))
?lapply
purrr::map(x, \(x) dnorm(x, 0, 1)) |> lapply(as.data.frame)
test <-purrr::map(x, \(x) dnorm(x, 0, 1)) |> lapply(as.data.frame)
testpp1
test[[1]]
purrr::map(x, \(x) dnorm(x, 0, 1))
test_df <- data.frame(a = c(1, 2, 3), b = c(2, 4, 6), c = c(8, 9, 10))
purrr::map(test_df, \(x) rnorm(x, 0, 1))
test <- purrr::map(test_df, \(x) rnorm(x, 0, 1))
test$1
test[[1]]
?tibble::enframe
A <- matrix(seq(1, 10), nrow = 5)
A
A <- matrix(seq(1, 10), nrow = 5, byrow = TRUE)
a
A
t(A)
t(A) |> as.vector()
?tibble::enframe
?tidyr::nesting
?tidyr::complete
df <- tibble(
group = c(1:2, 1, 2),
item_id = c(1:2, 2, 3),
item_name = c("a", "a", "b", "b"),
value1 = c(1, NA, 3, 4),
value2 = 4:7
)
df <- data.frame(
group = c(1:2, 1, 2),
item_id = c(1:2, 2, 3),
item_name = c("a", "a", "b", "b"),
value1 = c(1, NA, 3, 4),
value2 = 4:7
)
df
tidyr::complete(df, tidyr::nesting(group), long_bin = 1:20)
?lapply
?compare
??compare
rep(rep(1:5, each = 5), 2)
rep(rep(1:5, times = 5), 2)
rep(1:5, times = 10)
rep(rep(1:10, times = 5), 2)
rep(rep(1:10, times = 5), 2) != rep(1:10, times = 10)
rep(rep(1:10, times = 5), 2) != rep(1:10, times = 10) |> sum()
x <- rep(rep(1:10, times = 5), 2) != rep(1:10, times = 10)
sum(x)
?distinct
1e-2
x <- paste0('log(OF+', 0.01, ')')
x
typeof(1e-2)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
View(mats_to_vecdf)
?tryCatch
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
View(df_smoother)
View(df_to_mat)
View(mats_to_vecdf)
?grepl
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
View(df_to_mat)
mean <- x
mean <- 5
rnorm(3, mean = mean)
?remove
View(df_smoother)
View(df_smoother)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
?pdf
?ggplot2::geom_histogram
?dplyr::n()
2.2e-3
View(df_smoother)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
1e-3
NA+1e-3
log10(NA+1e-3)
log10(NA)
log10(1e-3)
as.numeric(1e-3)
typeof(1e-3)
typeof(as.numeric(1e-3))
## load functions and set base file path ---------------------------------------
source('01functions.R')
# Load Data ====================================================================
load('./processed_data/subsample.RData')
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
lubridate::year(observation_date) %in% years,
species_code == 'amecro')
years <- seq(2010, 2022, by = 1)
subsample <- dplyr::filter(subsample,
lubridate::year(observation_date) %in% years,
species_code == 'amecro')
library(dplyr)
# plotting
library(ggplot2)
# for color-blind friendly visuals
library(viridis)
# provides year_mon object type and related tools
library(zoo)
# flexibility in options when called through command line,
#> makes script play nicer with HPC
library(optparse)
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n(),
n_lists = n()) |>
mutate(obs_freq = as.numeric(obs_freq))
View(ym_obs_freq)
p <- map_uncompared(ym_obs_freq, epsilon = 1e-3)
p
x <- df_smoother(ym_obs_freq, smooth_type = 'flat', over = 'ym')
View(df_smoother)
## flat smoothed data ----------------------------------------------------------
smoothed_df <- df_smoother(df = ym_obs_freq, df_type = 'raw', smooth_type = 'flat')
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
## flat smoothed data ----------------------------------------------------------
smoothed_df <- df_smoother(df = ym_obs_freq, df_type = 'raw', smooth_type = 'flat')
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
## flat smoothed data ----------------------------------------------------------
smoothed_df <- df_smoother(df = ym_obs_freq, df_type = 'raw', smooth_type = 'flat')
View(smoothed_df)
# mapping
month_plot <- map_uncompared(smoothed_df, epsilon = eps)
p <- map_uncompared(smoothed_df, epsilon = 1e-3)
p
compare(ym_obs_freq, 'yy', 'flat')
x <- compare(ym_obs_freq, 'yy', 'flat')
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
x <- compare(ym_obs_freq, 'yy', 'flat')
rlang::last_trace()
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
x <- compare(ym_obs_freq, 'yy', 'flat')
View(x)
A <- matrix(c(5, 2, 2, -2, -1, 1, -3, -4, -3), nrow = 3)
A
eigen(A)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?grepl
?substr
substr('Jan 2022')
substr('Jan 2022_Feb 2022')
substr('Jan 2022_Feb 2022', 1, 8)
substr('Jan 2022_Feb 2022', 1, 8) |> zoo::as.yearmon()
x <- substr('Jan 2022_Feb 2022', 1, 8) |> zoo::as.yearmon()
x
lubridate::year(x)
lubridate::month(x)
?dplyr::arrange
# data manipulation tools
library(dplyr)
# plotting
library(ggplot2)
# for color-blind friendly visuals
library(viridis)
# provides year_mon object type and related tools
library(zoo)
# flexibility in options when called through command line,
#> makes script play nicer with HPC
library(optparse)
species <- 'amecro'
eps <- 1e-
eps <- 1e-3
source('01functions.R')
fp <- file.path('~', 'eBird_project', 'plots')
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
lubridate::year(observation_date) %in% years,
species_code == opt$s)
opt <- list(s = 'amecro', e = eps)
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
lubridate::year(observation_date) %in% years,
species_code == opt$s)
print('filtered')
# process data
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n(),
n_lists = n()) |>
mutate(obs_freq = as.numeric(obs_freq))
print('summarized')
# free up some RAM
remove(subsample)
# Unsmoothed Data EDA ==========================================================
# mapping
month_plot <- map_uncompared(ym_obs_freq, epsilon = eps)
fp <- file.path('~', 'Desktop')
save_pages(month_plot,
#path = file.path(fp, 'monthly', species),
path = fp,
name = paste0(species, '_monthly_raw.pdf'),
ncol = 6,
nrow = 4,
facets = vars(year_mon))
# data manipulation tools
library(dplyr)
# plotting
library(ggplot2)
# for color-blind friendly visuals
library(viridis)
# provides year_mon object type and related tools
library(zoo)
# flexibility in options when called through command line,
#> makes script play nicer with HPC
library(optparse)
opt <- list(s = 'amecro')
## load functions and set base file path ---------------------------------------
source('01functions.R')
# Load Data ====================================================================
load('./processed_data/subsample.RData')
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
lubridate::year(observation_date) %in% years,
species_code == opt$s)
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n(),
n_lists = n()) |>
mutate(obs_freq = as.numeric(obs_freq))
# Smooth =======================================================================
yy_compare_flat <- compare(ym_obs_freq, time_type = 'yy', smooth_type = 'flat')
str(yy_compare_flat)
View(yy_compare_flat)
?ggplot2::geom_raster
load('./processed_data/subsample.RData')
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n(),
n_lists = n()) |>
mutate(obs_freq = as.numeric(obs_freq))
library(dplyr)
library(zoo)
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n(),
n_lists = n()) |>
mutate(obs_freq = as.numeric(obs_freq))
min(ym_obs_freq$n_lsits)
min(ym_obs_freq$n_lists)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
load_data()
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
ym_obs_freq <- load_data()
opt = list(s = 'species')
ym_obs_freq <- load_data()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
load_data()
