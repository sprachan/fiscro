p
p <- ggplot()+geom_raster(aes(x = a, y = b))
p
View(save_pages_break)
View(compare_months)
library(ggplot2)
p <- geom_raster()
p
data <- data.frame(a = 1, b = 2, c = 3)
p+ggplot(data)
x <- list()
x[[1]] <- 1
x[[2]] <- ggplot::ggplot()
x[[2]] <- ggplot2::ggplot()
y[[1]]
?dplyr::case_when
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
View(save_pages_break)
# install.packages("devtools")
devtools::install_github("gadenbuie/rsthemes")
rsthemes::install_rsthemes()
??scale_fill_distiller
plot_map <- function(gg_obj){
p <- gg_obj+
ggplot2::geom_raster()+
ggplot2::scale_fill_distiller(palette = 'RdBu',
direction = -1,
na.value = '#cccccc')+
ggplot2::theme_bw()+
ggplot2::theme(legend.direction = 'horizontal',
legend.position = 'bottom')
return(p)
}
x <- data.frame(a = c(1, 2, 3), b = c('foo', 'bar', 'blah'))
plot_map(ggplot2::ggplot(x))
x
ggplot2::ggplot(x)
y <- ggplot2::ggplot(x)
plot_map(y)
x$c <- seq(0, 1, length.out = 3)
x$b <- c(4, 5, 6)
y <- ggplot2::ggplot(x, aes(x = a, y = b, fill = c))
y <- ggplot2::ggplot(x, ggplot2::aes(x = a, y = b, fill = c))
plot_map(y)
test <- ggplot2;:ggplot()
test <- ggplot2::ggplot()
test <- ggplot2::ggplot(ggplot2::aes(x = a, y = b, fill = c))
test <- ggplot2::ggplot(x, aes(x = a, y = b))
test <- ggplot2::ggplot(x, ggplot2::aes(x = a, y = b))
test+geom_raster(aes(fill = c))
test+ggplot2::geom_raster(ggplot2::aes(fill = c))
test <- ggplot2::ggplot(x, ggplot2::aes(fill = c))
test+ggplot2::geom_raster(ggplot2::aes(x = a, y = b))
?stopifnot
?stop
?stopifnot
foo <- 'map'
bar <- 'djdj'
stopifnot(foo %in% c('map', 'hist'))
stopifnot(bar %in% c('map', 'hist'))
test$data
test$data <- dplyr::filter(test$data, a > 1)
test$data
??scale_fill_discrete
??scale_fill_manual
x <- data.frame(long_bin = seq(1, 100, by = 1), lat_bin = seq(1, 100, by = 1), obs_freq = rbeta(100, 1, 1))
range(x$obs_freq)
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_manual(values = c('black', 'white'))
}
cutoff_plot(0.5, x)
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_gradient(values = c('black', 'white'))
}
cutoff_plot(0.5, x)
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_gradient()
}
cutoff_plot(0.5, x)
x <- data.frame(long_bin = rep(seq(1, 10), times = 10), lat_bin = rep(seq(1, 10), each = 10))
x$obs_freq <- rbeta(100, 1, 1)
ggplot2::ggplot(x)+ggplot2::geom_raster(ggplot2::aes(x = long_bin, y = lat_bin, fill = obs_freq))
cutoff_plot(0.5, x)
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_manual(c('black', 'white'))
}
cutoff_plot(0.5, x)
?scale_fill_manual
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_manual(values = c('black', 'white'))
}
?scale_fill_manual
cutoff_plot(0.5, x)
cutoff_plot <- function(cutoff, data_in){
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_manual(values = c('white', 'black'))
return(p)
}
cutoff_plot(0.5, x)
cutoff_plot(c(0.75, 0.5), x)
a <- cutoff_plot(c(0.75, 0.5), x)
# Plot =========================================================================
phis <- c(1e-3, 1e-2, 0.1, 0.5, 0.75)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
?purrr::map
?lapply
?purrr::map
?purrr::set_names
?ggplot2::labs
?ggplot2::labs
?ggplot2::theme_bw
x <- data.frame(long_bin = rep(seq(1, 10), each = 10), lat_bin = rep(seq(1, 10), times = 10))
x$obs_freq <- rbeta(100, 1, 1)
x$obs_freq <- runif(100, 0, 1)
range(x$obs_freq)
p <- ggplot2::ggplot(x)
p+ggplot2::theme_bw(panel.background = element_rect(fill = 'black'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = element_rect(fill = 'black'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'))
p <- p+ggplot2::geom_raster(aes(x = long_bin, y = lat_bin, fill = obs_freq))
p <- p+ggplot2::geom_raster(ggplot2::aes(x = long_bin, y = lat_bin, fill = obs_freq))
p
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+scale_fill_manual(values = c('white', 'black'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
x$obs_freq <- rbinom(100, 1, 0.5)
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
p
p$data <- x
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
x$obs_freq <- rbinom(100, 1, 0.5) |> as.factor()
x$obs_freq
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
p$data <- x
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
a <- seq(1, 3)
lapply(a, `+`)
purrr::map2(a, a, `+`)
p1 <- p
p2 <- p
p3 <- p
plots <- list(p, p1, p2, p3)
remove(p1, p2, p3)
plots
patchwork::wrap_plots(unlist(plots))
unlist(plots)
patchwork::wrap_plots(plots)
1-1e-3
# Plot =========================================================================
phis <- seq(1e-3, 0.999, length.out = 6)
phis
# Plot =========================================================================
phis <- seq(1e-3,0.2, 0.4, 0.6, 0.8, 0.999)
# Plot =========================================================================
phis <- c(1e-3,0.2, 0.4, 0.6, 0.8, 0.999)
cutoff_plot(x, 0.5)
x
x$obs_freq <- rbeta(100, 1, 1)
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- cat('Over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- cat('Over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
print(legend_lab)
return(p)
}
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- c('Over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
print(legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('Over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
print(legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('black', 'white'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
?ggplot2::theme
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'),
legend.key = element_rect(color = "black"))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'),
legend.key = ggplot2::element_rect(color = "black"))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
seq(1e-3, 0.999, length.out = 4)
y <- x
y$obs_freq <- rbeta(100, 1, 1)
purrr::map(phis, \(x) cutoff_plot(y, x, as.character(x)))
phis <- c(0.25, 0.5, 0.75, 1)
purrr::map(phis, \(x) cutoff_plot(y, x, as.character(x)))
y
plots <- purrr::map(phis, \(x) cutoff_plot(y, x, as.character(x)))
patchwork::wrap_plots(plots)
p
p$data <- y
plots <- list(p, plots)
patchwork::wrap_plots(plots)
p
plots
?as.factor
factor(c('Yes', 'No'), ordered = TRUE)
ordered(c('Yes', 'No'))
ordered(c('Yes', 'No', 'Yes', 'Yes', 'No', 'No'))
ordered(c('Yes', 'No', 'Yes', 'Yes', 'No', 'No'), levels = c('Yes', 'No'))
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = ordered(over, levels = c('Yes', 'No'))) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'),
legend.key = ggplot2::element_rect(color = "black"))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = ordered(over, levels = c('No', 'Yes'))) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'),
legend.key = ggplot2::element_rect(color = "black"))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
?ggplot2::scale_fill_viridis
?ggplot2::scale_fill_viridis_b
x <- data.frame(long_bin = rep(seq(1, 100), each = 10), lat_bin = rep(seq(1, 100), times = 10))
x$obs_freq <- rbeta(1000, 1, 1)
p <- ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour_filled(bins = 5)+
scale_fill_viridis(option = 'B')
library(ggplot2)
p <- ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour_filled(bins = 5)+
scale_fill_viridis(option = 'B')
library(viridis)
p <- ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour_filled(bins = 5)+
scale_fill_viridis(option = 'B')
p
ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour(bins = 5)+
scale_fill_viridis(option = 'B')
ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour()
View(x)
contour(x$long_bin, x$lat_bin, x$obs_freq)
contour(1:100, 1:100, x$obs_freq)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
df_to_mat(x)
??ungroup
library(tidyverse)
df_to_mat(x)
matrix(x$obs_freq, 200, 200, byrow = TRUE)
# Wrangle data =================================================================
# load data
load('./processed_data/subsample.RData')
View(subsample)
temp <- complete(subsample, nesting(year_mon), long_bin = 1:200, lat_bin = 1:200)
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == opt$s)
subsample <- filter(subsample, year(observation_date %in% years), species_code = 'fiscro')
subsample <- filter(subsample, year(observation_date %in% years), species_code == 'fiscro')
subsample <- filter(subsample, year(observation_date) %in% years, species_code == 'fiscro')
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
library(zoo)
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
# free up some RAM
remove(subsample)
temp <- complete(ym_obs_freq, nesting(year_mon), long_bin = 1:n, lat_bin = 1:n)
temp <- ungroup(ym_obs_freq) |> complete(nesting(year_mon), long_bin = 1:200, lat_bin = 1:200)
View(temp)
temp <- matrix(temp$long_bin, temp$lat_bin, temp$obs_freq, byrow = TRUE)
temp <- matrix(temp$obs_freq, nrow = 200, ncol = 200, byrow = TRUE)
contour(temp)
temp <- ungroup(ym_obs_freq) |> complete(long_bin = 1:200, lat_bin = 1:200)
View(temp)
?complete
temp <- ungroup(ym_obs_freq) |> expand(long_bin = 1:200, lat_bin = 1:200)
View(temp)
temp <- ungroup(ym_obs_freq) |> expand(long_bin = 1:200, lat_bin = 1:200, nesting(obs_freq))
View(temp)
temp <- ungroup(ym_obs_freq) |> complete(long_bin = 1:200, lat_bin = 1:200)
temp <- ungroup(ym_obs_freq) |> complete(long_bin = 1:200, lat_bin = 1:200) |> summarize(obs_freq = mean(obs_freq))
?summarize
temp <- ungroup(ym_obs_freq) |> complete(long_bin = 1:200, lat_bin = 1:200) |> group_by(long_bin, lat_bin) |> summarize(obs_freq = mean(obs_freq))
temp_mat <- matrix(temp$obs_freq, nrow = 200, ncol = 200, byrow = TRUE)
image(temp_mat)
contour(temp_mat)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled()
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 10)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 4)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour(bins = 7)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 7)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 7)+scale_fill_viridis(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 7)+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins =5)+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 10)+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins =5)+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins =5)+scale_fill_viridis_d(option = 'B', direction = -1)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled()+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled()+scale_fill_viridis_d()
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled()+scale_fill_viridis_d(option = 'B')
# This is some more advanced EDA on spatially unbiased data to look at
# Species counts over space and time.
# Load dependencies and parse options ==========================================
library(tidyverse) # data manipulation tools
library(viridis) # for color-blind friendly visuals
library(zoo) # helpful for year_mon object and related tools
library(optparse) # for flexibility in options when called through command line
# get options
option_list <- list(
make_option(c('-s', '--speciesCode'), type = 'character',
action = 'store', help = 'species for analysis')
)
# create a parser object
opt_parser = OptionParser(option_list = option_list);
# make a list of the arguments passed via command line
opt = parse_args(opt_parser);
source('01functions.R')
# Wrangle data =================================================================
# load data
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == opt$s)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == 'fiscro')
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
# free up some RAM
remove(subsample)
hist(ym_obs_freq$obs_freq)
hist(ym_obs_freq$obs_freq, bins = 100)
hist(ym_obs_freq$obs_freq, n = 100)
hist(ym_obs_freq$obs_freq, n = 100)
filter(ym_obs_freq, obs_freq > 0) |> hist(n = 100)
filter(ym_obs_freq, obs_freq > 0)
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = obs_freq))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = obs_freq), bins = 100)
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+0.1))
)
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-4)))
ggplot(ym_obs_freq)+geom_histogram(aes(x = log10(obs_freq+0.1)))
ggplot(ym_obs_freq)+geom_histogram(aes(x = log10(obs_freq+1e-4)))
ggplot(ym_obs_freq)+geom_histogram(aes(x = log10(obs_freq+0.1)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-4)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+0.1)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-5)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-2)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-5)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-10)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-5)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+0.1)))
1e-4
