test_compare <- c('Jan2021_Jan2022', 'Jan2018_Jan2019', 'Jan2019_Jan2020', 'Jan2020', 'Jan2021')
ym1 <- c('Jan2019', 'Jan2020', 'Jan2021', 'Jan2022', 'Mar2019', 'Mar2020', 'Mar2021', 'Mar2022')
zoo::as.yearmon(ym1)
ym1 <- zoo::as.yearmon(ym1)
ym1
ym2 <- ym1
test_df <- cbind(ym1, ym2)
library(dplyr)
library(ggplot2)
test_df |> View()
test_df <- data.frame(ym1 = ym1, ym2 = ym2)
test_df |> View()
test_df <- data.frame(ym1)
test_df
test_df <- test_df(expand(nesting(ym1 = ym1), nesting(ym2 = ym1)))
test_df <- test_df |> tidyr::expand(nesting(ym1 = ym1), nesting(ym2 = ym1))
library(tidyverse)
test_df <- test_df |> tidyr::expand(nesting(ym1 = ym1), nesting(ym2 = ym1))
View(test_df)
test_df <_ test_df |> filter(year(ym1) == year(ym2)-1, month(ym1) == month(ym2))
test_df <- test_df |> filter(year(ym1) == year(ym2)-1, month(ym1) == month(ym2))
test_df <- mutate(test_df, comparison = paste(ym1, ym2, sep = '_'))
?factor
?order
order(test_df$ym1, year(test_df$ym1))
test_df$ym1[order(test_df$ym1, year(test_df$ym1)),]
test_df$ym1[order(test_df$ym1, year(test_df$ym1))]
year(test_df$ym1)
test_df$ym1[order(test_df$ym1, month(test_df$ym1))]
month(test_df$ym2)
month(test_df$ym1)
arrange(test_df, month(ym1))
arrange(test_df, month(ym1), year(ym1))
arrange(test_df, month(ym1), desc(year(ym1)))
arrange(test_df, month(ym1), year(ym1))
?order
test_df <- arrange(test_df, month(ym1), year(ym1))
test_df
factor(test_df$comparison, unique(test_df$comparison[order(test_df$ym1, test_df$ym2, test_df$comparison)]))
factor(test_df$comparison, unique(test_df$comparison[order(test_df$ym1, test_df$ym2, test_df$comparison)])) |> is.ordered()
unique(test_df$comparison[order(test_df$ym1, test_df$ym2, test_df$comparison)])
test_df$comparison[order(test_df$ym1, test_df$ym2, test_df$comparison)]
order(test_df$ym1, test_df$ym2, test_df$comparison)
order(test_df$ym1)
factor(test_df$comparison, ordered = TRUE)
stop('x')
compare_years <- function(data_in, smooth_type){
yms <- unique(data_in$year_mon)
if(smooth_type == 'flat'){
x <- map(yms, ~ df_to_mat(data_in, .x)) |>
map(flat_smooth)
}else if(smooth_type == 'geom'){
x <- map(yms, ~ df_to_mat(data_in, .x)) |>
map(geom_smooth)
}else{
stop('Need valid smooth type, either flat or geom')
}
x <- set_names(yms) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'year_mon', value = 'obs_freq') |>
# have every year month combination
expand(nesting(year_mon = as.yearmon(year_mon),
obs_freq),
nesting(year_mon2 = as.yearmon(year_mon),
obs_freq2 = obs_freq)) |>
# only keep combinations between consecutive years (and the same
#> month)
filter(year(year_mon) == year(year_mon2)-1,
month(year_mon) == month(year_mon2)) |>
mutate(comparison = paste(year_mon, year_mon2, sep = '_'),
diff = map2(obs_freq2, obs_freq, `-`)) |>
select(-obs_freq, -obs_freq2) |>
unnest_longer(diff) |>
mutate(diff = case_when(is.nan(diff) ~ NA,
!is.nan(diff) ~ diff
),
transform_diff = case_when(is.na(diff) ~ NA,
diff < 0 ~ -sqrt(abs(diff)),
diff == 0 ~ 0,
diff > 0 ~ sqrt(abs(diff))
)
)
cat('year-on-year comparison df created, smoothed with', smooth_type)
n <- length(unique(x$comparison))
# add long_bin and lat_bin columns
x <- x |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n))
# reorder data: go sequentially by year within each month
x <- x |> arrange(month(year_mon), year(year_mon))
# make comparison into a factor, making sure its ordered correctly
x$comparison <- factor(x$comparison, ordered = TRUE)
}
test <- function(data_in) return(data_in$year)
test_df$year <- rep(0, length(test_df$ym1))
test(test_df)
year(test_df$ym1) %in% 1
year(test_df$ym1) %in% c(1, 3)
year(test_df$ym1)
year(test_df$ym1) %in% c(2019, 2021)
unique(test_df$ym1[year(test_df$ym1) %in% c(2019, 2021)])
test_df2 <- data.frame(ym1)
test_df2
expand(test_df2, nesting(ym1 = ym1, ym2 = ym1))
expand(test_df2, nesting(ym1 = ym1), nesting(ym2 = ym1)))
expand(test_df2, nesting(ym1 = ym1), nesting(ym2 = ym1))
test_df2 <- expand(test_df2, nesting(ym1 = ym1), nesting(ym2 = ym1))
filter(test_df2, year(ym1)==year(ym2), month(ym1) == month(ym2)-1)
test_df2
test_df2 |> View
View(test_df2)
month(ym1[1])
filter(test_df2, year(ym1)==year(ym2), month(ym1) == month(ym2)-2)
# do month-on-month comparisons within a year for a given set of years
compare_months <- function(data_in, years, smooth_type){
yms <- unique(data_in$year_mon)
if(smooth_type == 'flat'){
x <- map(yms, ~ df_to_mat(data_in, .x)) |>
map(flat_smooth)
}else if(smooth_type == 'geom'){
x <- map(yms, ~ df_to_mat(data_in, .x)) |>
map(geom_smooth)
}else{
stop('Need valid smooth type, either flat or geom')
}
x <- set_names(yms) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'year_mon', value = 'obs_freq') |>
# have every year month combination
expand(nesting(year_mon = as.yearmon(year_mon),
obs_freq),
nesting(year_mon2 = as.yearmon(year_mon),
obs_freq2 = obs_freq)) |>
# only keep combinations in the years we want, within the same year,
#> in subsequent months
filter(year(year_mon) %in% years,
year(year_mon) == year(year_mon2),
month(year_mon) == month(year_mon2)-1) |>
mutate(comparison = paste(year_mon, year_mon2, sep = '_'),
diff = map2(obs_freq2, obs_freq, `-`)) |>
select(-obs_freq, -obs_freq2) |>
unnest_longer(diff) |>
mutate(diff = case_when(is.nan(diff) ~ NA,
!is.nan(diff) ~ diff
),
transform_diff = case_when(is.na(diff) ~ NA,
diff < 0 ~ -sqrt(abs(diff)),
diff == 0 ~ 0,
diff > 0 ~ sqrt(abs(diff))
)
)
cat('month-on-month comparison df created, smoothed with', smooth_type)
n <- length(unique(x$comparison))
# add long_bin and lat_bin columns
x <- x |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n))
# reorder data: go sequentially by month within each year
x <- x |> arrange(year(year_mon), month(year_mon))
# make comparison into a factor, making sure its ordered correctly
x$comparison <- factor(x$comparison, ordered = TRUE)
}
View(compare_years)
View(compare_months)
?purrr::map
save_pages <- function(ggobj, type, directory, ncol, nrow, species, facets){
all_plots <- lapply(1:ggforce::n_pages(ggobj), function(j){
p_save <- ggobj+ggforce::facet_wrap_paginate(facets = facets,
ncol = ncol,
nrow = nrow,
page = j)
return(p_save)
}
)
name <- paste0(species, '_', type, '.pdf')
fp <- file.path('~', 'eBird_project', 'plots', directory, species, name)
pdf(fp, width = 11, height = 8.5)
lapply(all_plots, print)
dev.off()
}
# turn the dataframe to a matrix for easy use in lapply/maps
df_to_mat <- function(df, over, nest_by = 'year_mon', n = 200){
# make sure the data frame has every lat-long combination represented
# either within each year_mon or within each year_mon-year_mon comparison
if(nest_by == 'year_mon'){
temp <- ungroup(df) |>
complete(nesting(year_mon),
long_bin = 1:n,
lat_bin = 1:n) |>
filter(year_mon == ym) |>
arrange(long_bin, lat_bin)
temp <- matrix(temp$obs_freq, nrow = n, ncol = n, byrow = TRUE)
}else if(nest_by == 'comparison'){
temp <- ungroup(df) |>
complete(nesting(comparison),
long_bin = 1:n,
lat_bin = 1:n) |>
filter(comparison == com) |>
arrange(long_bin, lat_bin)
temp <- matrix(temp$transform_diff, nrow = n, ncol = n, byrow = TRUE)
}else{
stop('Provide proper nest_by, either year_mon or comparison')
}
# turn the data frame to a matrix
return(temp)
}
View(df_to_mat)
# make it easier to save plots onto separate pages
## plotting functions ----------------------------------------------------------
save_pages <- function(ggobj, type, directory, ncol, nrow, species, facets){
all_plots <- lapply(1:ggforce::n_pages(ggobj), function(j){
p_save <- ggobj+ggforce::facet_wrap_paginate(facets = facets,
ncol = ncol,
nrow = nrow,
page = j)
return(p_save)
}
)
name <- paste0(species, '_', type, '.pdf')
fp <- file.path('~', 'eBird_project', 'plots', directory, species, name)
pdf(fp, width = 11, height = 8.5)
lapply(all_plots, print)
dev.off()
}
## smoothing functions ---------------------------------------------------------
# smooth by applying a weighted average
geom_smooth <- function(matrix_in, w = 0.75){
N <- length(matrix_in[1,])
out <- matrix(NA, nrow = N, ncol = N)
for(j in 1:N){
for(k in 1:N){
temp <- matrix_in
temp[j, k] <- NA
valid_rows <- (j-1):(j+1)
valid_rows <- valid_rows[(j-1):(j+1) >= 1 & (j-1):(j+1) <= N]
valid_cols <- (k-1):(k+1)
valid_cols <- valid_cols[(k-1):(k+1) >= 1 & (k-1):(k+1) <= N]
neighbors <- temp[valid_rows, valid_cols]
n <- length(neighbors)-1
# if current cell is NA, do a regular average
if(is.na(matrix_in[j, k])){
out[j, k] <- mean(matrix_in[valid_rows, valid_cols], na.rm = TRUE)
}else{
# otherwise, do the weighted average
out[j, k] <- w*matrix_in[j, k]+((1-w)/n)*sum(neighbors, na.rm = TRUE)
}
}
}
return(out)
}
# smooth the data by averaging a cell with its neighbors; does not
#> propagate NA values.
flat_smooth <- function(matrix_in){
# assumes a square matrix (which we have)
N <- length(matrix_in[1,]) # should be 200
out <- matrix(NA, nrow = N, ncol = N)
for(j in 1:N){
for(k in 1:N){
# do interior cells first
if(1 < k && k < N && 1 < j && j < N){
out[j, k] <- mean(matrix_in[(j-1):(j+1), (k-1):(k+1)], na.rm = TRUE)
}else{
valid_rows <- (j-1):(j+1)
valid_rows <- valid_rows[(j-1):(j+1) >= 1 & (j-1):(j+1) <= N]
valid_cols <- (k-1):(k+1)
valid_cols <- valid_cols[(k-1):(k+1) >= 1 & (k-1):(k+1) <= N]
out[j, k] <- mean(matrix_in[valid_rows, valid_cols], na.rm = TRUE)
}
}
}
return(out)
}
## data manipulation functions -------------------------------------------------
# turn the dataframe to a matrix for easy use in lapply/maps
df_to_mat <- function(df, over, nest_by = 'ym', n = 200){
temp <- ungroup(df)
if(nest_by == 'ym'){
temp <- complete(temp, nesting(year_mon),
long_bin = 1:n,
lat_bin = 1:n) |>
filter(year_mon == over) |>
arrange(long_bin, lat_bin)
temp <- matrix(temp$obs_freq, nrow = n, ncol = n, byrow = TRUE)
return(temp)
}else if(nest_by == 'comparison'){
temp <- complete(temp, nesting(comparison),
long_bin = 1:n,
lat_bin = 1:n) |>
filter(comparison == over) |>
arrange(long_bin, lat_bin)
temp <- matrix(temp$transform_diff, nrow = n, ncol = n, byrow = TRUE)
return(temp)
}
}
# do year-on-year comparisons of the same month in subsequent years
compare_years <- function(data_in, smooth_type){
yms <- unique(data_in$year_mon)
# make a data frame that has transformed differences
x <- map(yms, ~df_to_mat(data_in, over = .x, nest_by = 'ym')) |>
set_names(yms) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'year_mon', value = 'obs_freq') |>
expand(nesting(year_mon = as.yearmon(year_mon),
obs_freq),
nesting(year_mon2 = as.yearmon(year_mon),
obs_freq2 = obs_freq)) |>
filter(year(year_mon) == year(year_mon2)-1,
month(year_mon) == month(year_mon2)) |>
mutate(comparison = paste(year_mon, year_mon2, sep = '_'),
diff = map2(obs_freq2, obs_freq, `-`)) |>
select(-obs_freq, -obs_freq2, -year_mon, -year_mon2) |>
unnest_longer(diff) |>
mutate(diff = case_when(is.nan(diff) ~ NA,
!is.nan(diff) ~ diff),
transform_diff = case_when(is.na(diff) ~ NA,
diff < 0 ~ -sqrt(abs(diff)),
diff == 0 ~ 0,
diff > 0 ~ sqrt(abs(diff)))
)
n <- length(unique(x$comparison))
# add lat_bin, long_bin columns
x <- x |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n))
com <- unique(x$comparison)
y <- map(com, ~df_to_mat(x, over = .x, nest_by = 'comparison')) |>
set_names(com)
if(smooth_type == 'flat'){
y <- map(y, flat_smooth)
}else if(smooth_type == 'geom'){
y <- map(y, geom_smooth)
}else{
stop('Need valid smooth type, either flat or geom')
}
y <- set_names(y, com) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'comparison', value = 'transform_diff') |>
unnest_longer(transform_diff) |>
mutate(transform_diff = case_when(is.nan(transform_diff) ~ NA,
!is.nan(transform_diff)~transform_diff)
)
n <- length(unique(y$comparison))
# add lat_bin, long_bin columns
y <- y |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n),
year_mon = as.yearmon(substring(comparison, 1, 8)))|>
arrange(year(year_mon), month(year_mon))
# make comparison into a factor, making sure its ordered correctly
y$comparison <- factor(y$comparison,
levels = unique(y$comparison),
ordered = TRUE)
return(y)
}
# do month-on-month comparisons within a year for a given set of years
compare_months <- function(data_in, years, smooth_type){
yms <- unique(data_in$year_mon)
# make a data frame that has transformed differences
x <- map(yms, ~df_to_mat(data_in, over = .x, nest_by = 'ym')) |>
set_names(yms) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'year_mon', value = 'obs_freq') |>
expand(nesting(year_mon = as.yearmon(year_mon),
obs_freq),
nesting(year_mon2 = as.yearmon(year_mon),
obs_freq2 = obs_freq)) |>
filter(year(year_mon) %in% years,
year(year_mon) == year(year_mon2),
month(year_mon) == month(year_mon2)-1) |>
mutate(comparison = paste(year_mon, year_mon2, sep = '_'),
diff = map2(obs_freq2, obs_freq, `-`)) |>
select(-obs_freq, -obs_freq2, -year_mon, -year_mon2) |>
unnest_longer(diff) |>
mutate(diff = case_when(is.nan(diff) ~ NA,
!is.nan(diff) ~ diff),
transform_diff = case_when(is.na(diff) ~ NA,
diff < 0 ~ -sqrt(abs(diff)),
diff == 0 ~ 0,
diff > 0 ~ sqrt(abs(diff)))
)
n <- length(unique(x$comparison))
# add lat_bin, long_bin columns
x <- x |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n))
com <- unique(x$comparison)
y <- map(com, ~df_to_mat(x, over = .x, nest_by = 'comparison')) |>
set_names(com)
if(smooth_type == 'flat'){
y <- map(y, flat_smooth)
}else if(smooth_type == 'geom'){
y <- map(y, geom_smooth)
}else{
stop('Need valid smooth type, either flat or geom')
}
y <- set_names(y, com) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'comparison', value = 'transform_diff') |>
unnest_longer(transform_diff) |>
mutate(transform_diff = case_when(is.nan(transform_diff) ~ NA,
!is.nan(transform_diff)~transform_diff)
)
n <- length(unique(y$comparison))
# add lat_bin, long_bin columns
y <- y |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n),
year_mon = as.yearmon(substring(comparison, 1, 8)))|>
arrange(month(year_mon), year(year_mon))
# make comparison into a factor, making sure its ordered correctly
y$comparison <- factor(y$comparison,
levels = unique(y$comparison),
ordered = TRUE)
return(y)
}
source('01functions.R')
View(compare_months)
View(compare_years)
View(flat_smooth)
View(compare_years)
(20*20)
(200*200)/10
View(save_pages)
p <- ggplot()
library(ggplot2)
p <- ggplot()
p$data <- data.frame(a = 1, b = 2)
p
p+geom_point(aes(a, b))
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
View(save_pages_break)
p <- ggplot(aes(x = a, y = b))
p <- ggplot()+geom_point(aes(x = a, y = b))
p
data <- data.frame(a = 1, b = 2)
View(data)
View(p)
p$data <- data
p
p <- ggplot()+geom_raster(aes(x = a, y = b))
p$data <- data
p
p <- ggplot()+geom_raster(aes(x = a, y = b))
p
View(save_pages_break)
View(compare_months)
library(ggplot2)
p <- geom_raster()
p
data <- data.frame(a = 1, b = 2, c = 3)
p+ggplot(data)
