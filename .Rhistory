scale_fill_viridis(option = 'B')
library(ggplot2)
p <- ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour_filled(bins = 5)+
scale_fill_viridis(option = 'B')
library(viridis)
p <- ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour_filled(bins = 5)+
scale_fill_viridis(option = 'B')
p
ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour(bins = 5)+
scale_fill_viridis(option = 'B')
ggplot(x, aes(x = long_bin, y = lat_bin, z = obs_freq))+
geom_contour()
View(x)
contour(x$long_bin, x$lat_bin, x$obs_freq)
contour(1:100, 1:100, x$obs_freq)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
df_to_mat(x)
??ungroup
library(tidyverse)
df_to_mat(x)
matrix(x$obs_freq, 200, 200, byrow = TRUE)
# Wrangle data =================================================================
# load data
load('./processed_data/subsample.RData')
View(subsample)
temp <- complete(subsample, nesting(year_mon), long_bin = 1:200, lat_bin = 1:200)
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == opt$s)
subsample <- filter(subsample, year(observation_date %in% years), species_code = 'fiscro')
subsample <- filter(subsample, year(observation_date %in% years), species_code == 'fiscro')
subsample <- filter(subsample, year(observation_date) %in% years, species_code == 'fiscro')
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
library(zoo)
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
# free up some RAM
remove(subsample)
temp <- complete(ym_obs_freq, nesting(year_mon), long_bin = 1:n, lat_bin = 1:n)
temp <- ungroup(ym_obs_freq) |> complete(nesting(year_mon), long_bin = 1:200, lat_bin = 1:200)
View(temp)
temp <- matrix(temp$long_bin, temp$lat_bin, temp$obs_freq, byrow = TRUE)
temp <- matrix(temp$obs_freq, nrow = 200, ncol = 200, byrow = TRUE)
contour(temp)
temp <- ungroup(ym_obs_freq) |> complete(long_bin = 1:200, lat_bin = 1:200)
View(temp)
?complete
temp <- ungroup(ym_obs_freq) |> expand(long_bin = 1:200, lat_bin = 1:200)
View(temp)
temp <- ungroup(ym_obs_freq) |> expand(long_bin = 1:200, lat_bin = 1:200, nesting(obs_freq))
View(temp)
temp <- ungroup(ym_obs_freq) |> complete(long_bin = 1:200, lat_bin = 1:200)
temp <- ungroup(ym_obs_freq) |> complete(long_bin = 1:200, lat_bin = 1:200) |> summarize(obs_freq = mean(obs_freq))
?summarize
temp <- ungroup(ym_obs_freq) |> complete(long_bin = 1:200, lat_bin = 1:200) |> group_by(long_bin, lat_bin) |> summarize(obs_freq = mean(obs_freq))
temp_mat <- matrix(temp$obs_freq, nrow = 200, ncol = 200, byrow = TRUE)
image(temp_mat)
contour(temp_mat)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled()
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 10)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 4)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour(bins = 7)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 7)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 7)+scale_fill_viridis(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 7)+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins =5)+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins = 10)+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins =5)+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled(bins =5)+scale_fill_viridis_d(option = 'B', direction = -1)
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled()+scale_fill_viridis_d(option = 'B')
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled()+scale_fill_viridis_d()
ggplot(ym_obs_freq, aes(x = long_bin, y = lat_bin, z = obs_freq))+geom_contour_filled()+scale_fill_viridis_d(option = 'B')
# This is some more advanced EDA on spatially unbiased data to look at
# Species counts over space and time.
# Load dependencies and parse options ==========================================
library(tidyverse) # data manipulation tools
library(viridis) # for color-blind friendly visuals
library(zoo) # helpful for year_mon object and related tools
library(optparse) # for flexibility in options when called through command line
# get options
option_list <- list(
make_option(c('-s', '--speciesCode'), type = 'character',
action = 'store', help = 'species for analysis')
)
# create a parser object
opt_parser = OptionParser(option_list = option_list);
# make a list of the arguments passed via command line
opt = parse_args(opt_parser);
source('01functions.R')
# Wrangle data =================================================================
# load data
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == opt$s)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == 'fiscro')
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
# free up some RAM
remove(subsample)
hist(ym_obs_freq$obs_freq)
hist(ym_obs_freq$obs_freq, bins = 100)
hist(ym_obs_freq$obs_freq, n = 100)
hist(ym_obs_freq$obs_freq, n = 100)
filter(ym_obs_freq, obs_freq > 0) |> hist(n = 100)
filter(ym_obs_freq, obs_freq > 0)
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = obs_freq))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = obs_freq), bins = 100)
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+0.1))
)
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-4)))
ggplot(ym_obs_freq)+geom_histogram(aes(x = log10(obs_freq+0.1)))
ggplot(ym_obs_freq)+geom_histogram(aes(x = log10(obs_freq+1e-4)))
ggplot(ym_obs_freq)+geom_histogram(aes(x = log10(obs_freq+0.1)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-4)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+0.1)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-5)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-2)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-5)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-10)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+1e-5)))
filter(ym_obs_freq, obs_freq > 0) |> ggplot()+geom_histogram(aes(x = log10(obs_freq+0.1)))
1e-4
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
p <- ggplot2::ggplot()
x <- data.frame(a = seq(1, 10), b = rep(c('a', 'b'), 5))
p <- ggplot2::ggplot(x, ggplot2::aes(x = a))+ggplot2::geom_histogram()+ggplot2::facet_wrap(facets = ggplot2::vars(b))
p
save_pages(p, hpc = FALSE, 1, 1, 'fiscro', ggplot2::vars(b))
p <- ggplot2::ggplot(x, ggplot2::aes(x = a))+ggplot2::geom_histogram()+ggforce::facet_wrap_paginate(facets = ggplot2::vars(b))
save_pages(p, hpc = FALSE, 1, 1, 'fiscro', ggplot2::vars(b))
p <- ggplot2::ggplot(x, ggplot2::aes(x = a))+ggplot2::geom_histogram()+ggforce::facet_wrap_paginate(facets = ggplot2::vars(b), nrow = 1, ncol = 2)
save_pages(p, hpc = FALSE, 2, 1, 'fiscro', vars(b))
save_pages(p, hpc = FALSE, 2, 1, 'fiscro', ggplot2::vars(b))
save_pages(p, hpc = FALSE, ncol = 2, nrow = 1, species = 'fiscro', facets = ggplot2::vars(b))
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
save_pages(p, hpc = FALSE, ncol = 2, nrow = 1, species = 'fiscro', facets = ggplot2::vars(b))
save_pages(p, hpc = FALSE, ncol = 2, nrow = 1, type = 'test', species = 'fiscro', facets = ggplot2::vars(b))
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
save_pages(p, hpc = FALSE, ncol = 2, nrow = 1, type = 'test', species = 'fiscro', facets = ggplot2::vars(b))
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
save_pages(p, hpc = FALSE, ncol = 2, nrow = 1, type = 'test', directory = 'test', species = 'fiscro', facets = ggplot2::vars(b))
save_pages(p, hpc = FALSE, ncol = 2, nrow = 1, type = 'test', directory = 'test', species = 'fiscro', facets = ggplot2::vars(b))
fp <- file.path('~', 'Library', 'CloudStorage', 'OneDrive-BowdoinCollege', 'ebird_plots')
fp <- file.path('~', 'Library', 'CloudStorage', 'OneDrive-BowdoinCollege', 'ebird_plots', 'test')
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
save_pages(p, fp, facets = ggplot2::vars(b))
save_pages(p, fp, ncol = 2, nrow = 1facets = ggplot2::vars(b))
save_pages(p, fp, ncol = 2, nrow = 1, facets = ggplot2::vars(b))
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
save_pages(p, fp, ncol = 2, nrow = 1, facets = ggplot2::vars(b))
name <- paste0('test.pdf')
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
save_pages(p, fp, name, ncol = 2, nrow = 1, facets = ggplot2::vars(b))
name <- paste0('test', '.pdf')
save_pages(p, fp, name, ncol = 2, nrow = 1, facets = ggplot2::vars(b))
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
save_pages(p, fp, name, ncol = 2, nrow = 1, facets = ggplot2::vars(b))
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
save_pages(p, fp, name, ncol = 2, nrow = 1, facets = ggplot2::vars(b))
?grepl
grepl('.pdf', name)
?warning
warning(grepl('.pdf', name))
?tryCatch
?stop
?try
?stopifnot
?vars
typeof(ggplot2::vars(b))
stopifnot('message' = grepl('.pdf', 'test'))
plot_type <- 'map'
grepl('map', plot_type)|grepl('hist', plot_type)
plot_type <- 'hist'
grepl('map', plot_type)|grepl('hist', plot_type)
plot_type <- 'neither'
grepl('map', plot_type)|grepl('hist', plot_type)
typeof(p)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
View(save_pages)
fp
# baseline file path for plots (change this if running on different system)
fp <- file.path('~', 'Library', 'CloudStorage', 'OneDrive-BowdoinCollege', 'ebird_plots')
file.path(fp, 'test')
library(tidyverse) # data manipulation tools
library(viridis) # for color-blind friendly visuals
library(zoo) # helpful for year_mon object and related tools
library(optparse) # for flexibility in options when called through command line
# get options
option_list <- list(
make_option(c('-s', '--speciesCode'),
type = 'character',
action = 'store',
help = 'species for analysis')
)
# create a parser object
opt_parser = OptionParser(option_list = option_list);
# make a list of the arguments passed via command line
opt = parse_args(opt_parser);
species <- opt$s
# functions
source('01functions.R')
# baseline file path for plots (change this if running on different system)
fp <- file.path('~', 'Library', 'CloudStorage', 'OneDrive-BowdoinCollege', 'ebird_plots')
# load data
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == species)
# load data
load('./processed_data/subsample.RData')
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == 'fiscro')
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
print('summarized')
yms <- unique(year(ym_obs_freq$year_mon))
# free up some RAM
remove(subsample)
eps <- 1e-4
# prep smoothed data
smoothed_df <- map(yms, ~df_to_mat(ym_obs_freq, .x)) |>
map(flat_smooth) |>
set_names(yms) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'year_mon', value = 'obs_freq') |>
unnest_longer('obs_freq') |>
mutate(obs_freq = case_when(is.nan(obs_freq) ~ NA,
is.na(obs_freq) ~ NA,
!is.na(obs_freq) ~ obs_freq))
View(smoothed_df)
library(tidyverse) # data manipulation tools
library(viridis) # for color-blind friendly visuals
library(zoo) # helpful for year_mon object and related tools
library(optparse) # for flexibility in options when called through command line
# get options
option_list <- list(
make_option(c('-s', '--speciesCode'), type = 'character',
action = 'store', help = 'species for analysis')
)
# create a parser object
opt_parser = OptionParser(option_list = option_list);
# make a list of the arguments passed via command line
opt = parse_args(opt_parser);
source('01functions.R')
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == 'amecro')
print('filtered')
# process data
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
print('summarized')
# free up some RAM
remove(subsample)
ggplot(ym_obs_freq, aes(x = log10(observation_frequency)))+geom_histogram()
ggplot(ym_obs_freq, aes(x = log10(obs_freq)))+geom_histogram()
ggplot(ym_obs_freq, aes(x = obs_freq)+geom_histogram()
)
ggplot(ym_obs_freq, aes(x = obs_freq))+geom_histogram()
ggplot(ym_obs_freq, aes(x = obs_freq))+geom_histogram(bins = 100)
ggplot(ym_obs_freq, aes(x = obs_freq))+geom_histogram(bins = 50)
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)+
labs(title = 'untransformed OF, 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+0.1)))+
geom_histogram(bins = 50)+
labs(title = 'log10(OF+0.1), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+1e-4)))+
geom_histogram(bins = 50)+
labs(title = 'log10(OF+1e-4), 0 and 1 filtered out')
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == 'fiscro')
print('filtered')
# process data
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
print('summarized')
# free up some RAM
remove(subsample)
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)+
labs(title = 'untransformed OF, 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+0.1)))+
geom_histogram(bins = 50)+
labs(title = 'log10(OF+0.1), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+1e-4)))+
geom_histogram(bins = 50)+
labs(title = 'log10(OF+1e-4), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)+
labs(title = 'fiscro untransformed OF, 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+0.1)))+
geom_histogram(bins = 50)+
labs(title = 'fiscro log10(OF+0.1), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+1e-4)))+
geom_histogram(bins = 50)+
labs(title = 'fiscro log10(OF+1e-4), 0 and 1 filtered out')
load('./processed_data/subsample.RData')
print('loaded')
# filter data
years <- seq(2010, 2022, by = 1)
subsample <- filter(subsample,
year(observation_date) %in% years,
species_code == 'amecro')
print('filtered')
# process data
ym_obs_freq <- mutate(subsample,
year_mon = as.yearmon(observation_date)) |>
group_by(year_mon, long_bin, lat_bin) |>
summarize(obs_freq = sum(species_observed)/n())
print('summarized')
# free up some RAM
remove(subsample)
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = obs_freq))+
geom_histogram(bins = 50)+
labs(title = 'amecro untransformed OF, 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+0.1)))+
geom_histogram(bins = 50)+
labs(title = 'amecro log10(OF+0.1), 0 and 1 filtered out')
filter(ym_obs_freq, obs_freq != 0, obs_freq != 1) |>
ggplot(aes(x = log10(obs_freq+1e-4)))+
geom_histogram(bins = 50)+
labs(title = 'amecro log10(OF+1e-4), 0 and 1 filtered out')
x <- grepl('x', 'x')|grepl('y', 'x')
x <- grepl('x', 'y')|grepl('y', 'x')
?grepl
stopifnot('error message' = x)
stopifnot(x)
?purrr::map
??complete
?tidyr::complete
?tidyr::nesting
?dplyr::arrange
?purrr::map
??enframe
??unnest_longer
?dplyr::case_when
?tibble::enframe
?purrr::map
?dplyr::ungroup
1e-2
10^(-2)
10^(-2.5)
epsilon <- 1e-2
log10(0+epsilon)
log10(1+epsilon)
x <- seq(0, 1, length.out = 100)
plot(x, log10(x+epsilon))
#|>
|>
log10(0.01+epsilon)
typeof(epsilon)
as.numeric(epsilon) |> typeof()
?log10
?lapply
x <- list(0, 1, 2)
lapply(\(x) log10(.x + 0.001))
lapply(x, \(x) log10(.x + 0.001))
lapply(x, \(x) log10(x + 0.001))
y<- lapply(x, \(x) log10(x + 0.001))
log10(0+0.001)
log10(1+0.001)
log10(2+0.001)
log10(0+1e-2)
log10(1+1e-2)
?ggplot2::scale_fill_distiller
display.brewer.all()
RColorBrewer::brewer.pal()
RColorBrewer::display.brewer.all()
?dplyr::summarise
?dplyr::reframe
?dplyr::row_bind
?dplyr::bind_rows
x <- data.frame(c('a', 'b', 'c'), c(1, 2, 3))
x
x <- data.frame(a = c(1, 2, 3), b = c(4, 5, 6))
x
y <- data.frame(a = c(7, 8, 9), b = c(10, 11, 12))
y
dplyr::bind_rows(x, y)
dplyr::bind_rows(x, y, .id = 'df')
dplyr::bind_rows(x, y, .id = 'id')
x
tibble::tibble(x)
dplyr::bind_rows(list(x = x, y = y), .id = 'id')
?write.table
x <- c(0, 1, NA, NA)
sum(x > 0)
sum(x > 0, na.rm = TRUE)
A <- matrix(c(-2, -2, 4, -4, 1, 2, 2, 2, 5), nrow = 3, ncol = 3)
A
?eigen
eigen(A)
eigen(A)$vectors/min(eigen(A)$vectors)
vecs <- eigen(A)$vectors
vecs
vecs[,1]/min(vecs[,1])
vecs[,2]/min(vecs[,2])
vecs[,3]/min(vecs[,3])
vecs[,3]/min(vecs[,3])*3
A <- matrix(rbinom(9, 10), nrow = 3, ncol = 3)
A <- matrix(rbinom(9, 10, prob = rep(1/10, 9)), nrow = 3, ncol = 3)
?rbinom
rbinom(1, 5)
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(1, 5, prob = rep(1, 5))
rbinom(30, 5, prob = rep(1, 5))
rbinom(30, 5, prob = rep(1/5, 5))
A <- matrix(rbinom(9, 10, prob = rep(1/10, 9)), nrow = 3, ncol = 3)
A
eigen(A)
library(phaseR)
install,packages('phaseR')
install.packages('phaseR')
library(phaseR)
?phaseR
out <- flowField(de,
xlim = c(0, 5),
ylim = c(0, 10),
parameters = params)
# lotka-volterra model
de <- function(t, Y, parameters){
lambda <- parameters[1]
epsilon <- parameters[2]
eta <- parameters[3]
delta <- parameters[4]
dY <- numeric(2)
dY[1] <- lambda*x-epsilon*x*y
dY[2] <- eta*x*y-delta*y
return(list(dY))
}
params <- c(2, 1, 3, 2)
out <- flowField(de,
xlim = c(0, 5),
ylim = c(0, 10),
parameters = params)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/modeling/phase_example.R", echo=TRUE)
# lotka-volterra model
de <- function(t, Y, parameters){
lambda <- parameters[1]
epsilon <- parameters[2]
eta <- parameters[3]
delta <- parameters[4]
x <- Y[1]
y <- Y[2]
dY <- numeric(2)
dY[1] <- lambda*x-epsilon*x*y
dY[2] <- eta*x*y-delta*y
return(list(dY))
}
params <- c(2, 1, 3, 2)
out <- flowField(de,
xlim = c(0, 5),
ylim = c(0, 10),
parameters = params,
add = FALSE)
