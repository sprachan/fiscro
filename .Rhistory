yms <- unique(data_in$year_mon)
# make a data frame that has transformed differences
x <- map(yms, ~df_to_mat(data_in, over = .x, nest_by = 'ym')) |>
set_names(yms) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'year_mon', value = 'obs_freq') |>
expand(nesting(year_mon = as.yearmon(year_mon),
obs_freq),
nesting(year_mon2 = as.yearmon(year_mon),
obs_freq2 = obs_freq)) |>
filter(year(year_mon) == year(year_mon2)-1,
month(year_mon) == month(year_mon2)) |>
mutate(comparison = paste(year_mon, year_mon2, sep = '_'),
diff = map2(obs_freq2, obs_freq, `-`)) |>
select(-obs_freq, -obs_freq2, -year_mon, -year_mon2) |>
unnest_longer(diff) |>
mutate(diff = case_when(is.nan(diff) ~ NA,
!is.nan(diff) ~ diff),
transform_diff = case_when(is.na(diff) ~ NA,
diff < 0 ~ -sqrt(abs(diff)),
diff == 0 ~ 0,
diff > 0 ~ sqrt(abs(diff)))
)
n <- length(unique(x$comparison))
# add lat_bin, long_bin columns
x <- x |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n))
com <- unique(x$comparison)
y <- map(com, ~df_to_mat(x, over = .x, nest_by = 'comparison')) |>
set_names(com)
if(smooth_type == 'flat'){
y <- map(y, flat_smooth)
}else if(smooth_type == 'geom'){
y <- map(y, geom_smooth)
}else{
stop('Need valid smooth type, either flat or geom')
}
y <- set_names(y, com) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'comparison', value = 'transform_diff') |>
unnest_longer(transform_diff) |>
mutate(transform_diff = case_when(is.nan(transform_diff) ~ NA,
!is.nan(transform_diff)~transform_diff)
)
n <- length(unique(y$comparison))
# add lat_bin, long_bin columns
y <- y |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n),
year_mon = as.yearmon(substring(comparison, 1, 8)))|>
arrange(year(year_mon), month(year_mon))
# make comparison into a factor, making sure its ordered correctly
y$comparison <- factor(y$comparison,
levels = unique(y$comparison),
ordered = TRUE)
return(y)
}
# do month-on-month comparisons within a year for a given set of years
compare_months <- function(data_in, years, smooth_type){
yms <- unique(data_in$year_mon)
# make a data frame that has transformed differences
x <- map(yms, ~df_to_mat(data_in, over = .x, nest_by = 'ym')) |>
set_names(yms) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'year_mon', value = 'obs_freq') |>
expand(nesting(year_mon = as.yearmon(year_mon),
obs_freq),
nesting(year_mon2 = as.yearmon(year_mon),
obs_freq2 = obs_freq)) |>
filter(year(year_mon) %in% years,
year(year_mon) == year(year_mon2),
month(year_mon) == month(year_mon2)-1) |>
mutate(comparison = paste(year_mon, year_mon2, sep = '_'),
diff = map2(obs_freq2, obs_freq, `-`)) |>
select(-obs_freq, -obs_freq2, -year_mon, -year_mon2) |>
unnest_longer(diff) |>
mutate(diff = case_when(is.nan(diff) ~ NA,
!is.nan(diff) ~ diff),
transform_diff = case_when(is.na(diff) ~ NA,
diff < 0 ~ -sqrt(abs(diff)),
diff == 0 ~ 0,
diff > 0 ~ sqrt(abs(diff)))
)
n <- length(unique(x$comparison))
# add lat_bin, long_bin columns
x <- x |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n))
com <- unique(x$comparison)
y <- map(com, ~df_to_mat(x, over = .x, nest_by = 'comparison')) |>
set_names(com)
if(smooth_type == 'flat'){
y <- map(y, flat_smooth)
}else if(smooth_type == 'geom'){
y <- map(y, geom_smooth)
}else{
stop('Need valid smooth type, either flat or geom')
}
y <- set_names(y, com) |>
lapply(t) |>
lapply(as.vector) |>
enframe(name = 'comparison', value = 'transform_diff') |>
unnest_longer(transform_diff) |>
mutate(transform_diff = case_when(is.nan(transform_diff) ~ NA,
!is.nan(transform_diff)~transform_diff)
)
n <- length(unique(y$comparison))
# add lat_bin, long_bin columns
y <- y |> mutate(long_bin = rep(rep(1:200, each = 200), n),
lat_bin = rep(rep(1:200, times = 200), n),
year_mon = as.yearmon(substring(comparison, 1, 8)))|>
arrange(month(year_mon), year(year_mon))
# make comparison into a factor, making sure its ordered correctly
y$comparison <- factor(y$comparison,
levels = unique(y$comparison),
ordered = TRUE)
return(y)
}
source('01functions.R')
View(compare_months)
View(compare_years)
View(flat_smooth)
View(compare_years)
(20*20)
(200*200)/10
View(save_pages)
p <- ggplot()
library(ggplot2)
p <- ggplot()
p$data <- data.frame(a = 1, b = 2)
p
p+geom_point(aes(a, b))
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
View(save_pages_break)
p <- ggplot(aes(x = a, y = b))
p <- ggplot()+geom_point(aes(x = a, y = b))
p
data <- data.frame(a = 1, b = 2)
View(data)
View(p)
p$data <- data
p
p <- ggplot()+geom_raster(aes(x = a, y = b))
p$data <- data
p
p <- ggplot()+geom_raster(aes(x = a, y = b))
p
View(save_pages_break)
View(compare_months)
library(ggplot2)
p <- geom_raster()
p
data <- data.frame(a = 1, b = 2, c = 3)
p+ggplot(data)
x <- list()
x[[1]] <- 1
x[[2]] <- ggplot::ggplot()
x[[2]] <- ggplot2::ggplot()
y[[1]]
?dplyr::case_when
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
View(save_pages_break)
# install.packages("devtools")
devtools::install_github("gadenbuie/rsthemes")
rsthemes::install_rsthemes()
??scale_fill_distiller
plot_map <- function(gg_obj){
p <- gg_obj+
ggplot2::geom_raster()+
ggplot2::scale_fill_distiller(palette = 'RdBu',
direction = -1,
na.value = '#cccccc')+
ggplot2::theme_bw()+
ggplot2::theme(legend.direction = 'horizontal',
legend.position = 'bottom')
return(p)
}
x <- data.frame(a = c(1, 2, 3), b = c('foo', 'bar', 'blah'))
plot_map(ggplot2::ggplot(x))
x
ggplot2::ggplot(x)
y <- ggplot2::ggplot(x)
plot_map(y)
x$c <- seq(0, 1, length.out = 3)
x$b <- c(4, 5, 6)
y <- ggplot2::ggplot(x, aes(x = a, y = b, fill = c))
y <- ggplot2::ggplot(x, ggplot2::aes(x = a, y = b, fill = c))
plot_map(y)
test <- ggplot2;:ggplot()
test <- ggplot2::ggplot()
test <- ggplot2::ggplot(ggplot2::aes(x = a, y = b, fill = c))
test <- ggplot2::ggplot(x, aes(x = a, y = b))
test <- ggplot2::ggplot(x, ggplot2::aes(x = a, y = b))
test+geom_raster(aes(fill = c))
test+ggplot2::geom_raster(ggplot2::aes(fill = c))
test <- ggplot2::ggplot(x, ggplot2::aes(fill = c))
test+ggplot2::geom_raster(ggplot2::aes(x = a, y = b))
?stopifnot
?stop
?stopifnot
foo <- 'map'
bar <- 'djdj'
stopifnot(foo %in% c('map', 'hist'))
stopifnot(bar %in% c('map', 'hist'))
test$data
test$data <- dplyr::filter(test$data, a > 1)
test$data
??scale_fill_discrete
??scale_fill_manual
x <- data.frame(long_bin = seq(1, 100, by = 1), lat_bin = seq(1, 100, by = 1), obs_freq = rbeta(100, 1, 1))
range(x$obs_freq)
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_manual(values = c('black', 'white'))
}
cutoff_plot(0.5, x)
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_gradient(values = c('black', 'white'))
}
cutoff_plot(0.5, x)
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_gradient()
}
cutoff_plot(0.5, x)
x <- data.frame(long_bin = rep(seq(1, 10), times = 10), lat_bin = rep(seq(1, 10), each = 10))
x$obs_freq <- rbeta(100, 1, 1)
ggplot2::ggplot(x)+ggplot2::geom_raster(ggplot2::aes(x = long_bin, y = lat_bin, fill = obs_freq))
cutoff_plot(0.5, x)
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_manual(c('black', 'white'))
}
cutoff_plot(0.5, x)
?scale_fill_manual
cutoff_plot <- function(cutoff, data_in){
data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 0,
obs_freq >= cutoff ~ 1),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_manual(values = c('black', 'white'))
}
?scale_fill_manual
cutoff_plot(0.5, x)
cutoff_plot <- function(cutoff, data_in){
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::scale_fill_manual(values = c('white', 'black'))
return(p)
}
cutoff_plot(0.5, x)
cutoff_plot(c(0.75, 0.5), x)
a <- cutoff_plot(c(0.75, 0.5), x)
# Plot =========================================================================
phis <- c(1e-3, 1e-2, 0.1, 0.5, 0.75)
source("~/Library/CloudStorage/OneDrive-BowdoinCollege/Documents/ebird_project/fiscro/01functions.R", echo=TRUE)
?purrr::map
?lapply
?purrr::map
?purrr::set_names
?ggplot2::labs
?ggplot2::labs
?ggplot2::theme_bw
x <- data.frame(long_bin = rep(seq(1, 10), each = 10), lat_bin = rep(seq(1, 10), times = 10))
x$obs_freq <- rbeta(100, 1, 1)
x$obs_freq <- runif(100, 0, 1)
range(x$obs_freq)
p <- ggplot2::ggplot(x)
p+ggplot2::theme_bw(panel.background = element_rect(fill = 'black'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = element_rect(fill = 'black'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'))
p <- p+ggplot2::geom_raster(aes(x = long_bin, y = lat_bin, fill = obs_freq))
p <- p+ggplot2::geom_raster(ggplot2::aes(x = long_bin, y = lat_bin, fill = obs_freq))
p
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+scale_fill_manual(values = c('white', 'black'))
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
x$obs_freq <- rbinom(100, 1, 0.5)
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
p
p$data <- x
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
x$obs_freq <- rbinom(100, 1, 0.5) |> as.factor()
x$obs_freq
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
p$data <- x
p+ggplot2::theme_bw()+ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+ggplot2::scale_fill_manual(values = c('white', 'black'))
a <- seq(1, 3)
lapply(a, `+`)
purrr::map2(a, a, `+`)
p1 <- p
p2 <- p
p3 <- p
plots <- list(p, p1, p2, p3)
remove(p1, p2, p3)
plots
patchwork::wrap_plots(unlist(plots))
unlist(plots)
patchwork::wrap_plots(plots)
1-1e-3
# Plot =========================================================================
phis <- seq(1e-3, 0.999, length.out = 6)
phis
# Plot =========================================================================
phis <- seq(1e-3,0.2, 0.4, 0.6, 0.8, 0.999)
# Plot =========================================================================
phis <- c(1e-3,0.2, 0.4, 0.6, 0.8, 0.999)
cutoff_plot(x, 0.5)
x
x$obs_freq <- rbeta(100, 1, 1)
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- cat('Over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- cat('Over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
print(legend_lab)
return(p)
}
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- c('Over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
print(legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('Over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
print(legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('black', 'white'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
?ggplot2::theme
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'),
legend.key = element_rect(color = "black"))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = as.factor(over)) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'),
legend.key = ggplot2::element_rect(color = "black"))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
seq(1e-3, 0.999, length.out = 4)
y <- x
y$obs_freq <- rbeta(100, 1, 1)
purrr::map(phis, \(x) cutoff_plot(y, x, as.character(x)))
phis <- c(0.25, 0.5, 0.75, 1)
purrr::map(phis, \(x) cutoff_plot(y, x, as.character(x)))
y
plots <- purrr::map(phis, \(x) cutoff_plot(y, x, as.character(x)))
patchwork::wrap_plots(plots)
p
p$data <- y
plots <- list(p, plots)
patchwork::wrap_plots(plots)
p
plots
?as.factor
factor(c('Yes', 'No'), ordered = TRUE)
ordered(c('Yes', 'No'))
ordered(c('Yes', 'No', 'Yes', 'Yes', 'No', 'No'))
ordered(c('Yes', 'No', 'Yes', 'Yes', 'No', 'No'), levels = c('Yes', 'No'))
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = ordered(over, levels = c('Yes', 'No'))) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'),
legend.key = ggplot2::element_rect(color = "black"))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
cutoff_plot <- function(data_in, cutoff, title){
legend_lab <- paste0('OF over ', title)
p <- data_in |> dplyr::mutate(over = dplyr::case_when(obs_freq < cutoff ~ 'No',
obs_freq >= cutoff ~ 'Yes'),
over = ordered(over, levels = c('No', 'Yes'))) |>
ggplot2::ggplot(ggplot2::aes(x = long_bin, y = lat_bin, fill = over))+
ggplot2::geom_raster()+
ggplot2::theme_bw()+
ggplot2::theme(panel.background = ggplot2::element_rect(fill = '#555555'),
legend.key = ggplot2::element_rect(color = "black"))+
ggplot2::scale_fill_manual(values = c('white', 'black'))+
ggplot2::labs(fill = legend_lab)
return(p)
}
cutoff_plot(x, 0.5, '0.5')
